# Reusable Azure DevOps Template for Terraform Setup
# This template installs dependencies, loads variables, and sets up the environment.

parameters:
- name: setupType
  type: string
  default: 'minimal' # 'minimal' or 'full'

steps:
- task: Bash@3
  displayName: 'Install Core Dependencies & Load Variables'
  inputs:
    targetType: 'inline'
    script: |
      set -euo pipefail
      echo "==> [SETUP] Exporting parameters as pipeline variables..."
      # This is the first and only time we parse the YAML file.
      # It converts every parameter into a pipeline variable (e.g., 'COMPOSITION_PATH').
      yq e '.pipeline-parameters | to_entries | .[] | "##vso[task.setvariable variable=" + .key + "]" + .value' $(Build.SourcesDirectory)/$(PIPELINE_VARS_PATH)

      echo "==> [INSTALL] Installing yq..."
      YQ_VERSION="v4.40.5"
      YQ_SHA256="9323c8901842722a163b538656540e5bd5424a4c195914a57794e284a48d132a"
      wget "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -O /usr/local/bin/yq
      echo "${YQ_SHA256}  /usr/local/bin/yq" | sha256sum -c -
      chmod +x /usr/local/bin/yq

      echo "==> [INSTALL] Installing Core dependencies (yq, python)..."
      pip install --upgrade pip -q pyyaml

- task: Cache@2
  displayName: 'Cache Tools and Packages'
  inputs:
    key: 'tools | $(Agent.OS) | terraform-setup.yml'
    path: '$(Pipeline.Workspace)/.cache'

- task: Bash@3
  displayName: 'Define and Verify Paths'
  inputs:
    targetType: 'inline'
    script: |
      set -euo pipefail
      echo "==> [SETUP] Defining and verifying common paths..."
      # This task runs AFTER variables are loaded, so it can use them to construct absolute paths.
      TF_PROJECT_ROOT="$(Build.SourcesDirectory)/terraform-platform"
      COMPOSITION_PATH_ABS="${TF_PROJECT_ROOT}/$(COMPOSITION_PATH)"

      # Verify composition path early to fail fast
      if [ ! -d "$COMPOSITION_PATH_ABS" ]; then
          echo "FATAL: The specified COMPOSITION_PATH does not exist: ${COMPOSITION_PATH_ABS}"
          echo "Please check the CLOUD and STACK_NAME variables in your pipeline-vars.yml file."
          exit 1
      fi

      # Export all absolute paths for subsequent steps
      echo "##vso[task.setvariable variable=TF_PROJECT_ROOT]${TF_PROJECT_ROOT}"
      echo "##vso[task.setvariable variable=TF_TOOLS_DIR]${TF_PROJECT_ROOT}/tools"
      echo "##vso[task.setvariable variable=TFVARS_FILE]${TF_PROJECT_ROOT}/generated/all.tfvars.json"
      echo "##vso[task.setvariable variable=COMPOSITION_PATH_ABS]${COMPOSITION_PATH_ABS}"
      echo "##vso[task.setvariable variable=SCHEMAS_DIR_PATH_ABS]${TF_PROJECT_ROOT}/$(SCHEMAS_DIR_PATH)"
      echo "##vso[task.setvariable variable=VARS_PATH_ABS]$(cd $(Build.SourcesDirectory) && pwd)/$(VARS_PATH)"
      echo "##vso[task.setvariable variable=BACKEND_CONFIG_PATH_ABS]$(cd $(Build.SourcesDirectory) && pwd)/$(BACKEND_CONFIG_PATH)"

- task: Bash@3
  displayName: 'Install Terraform v$(TF_VERSION)'
  inputs:
    targetType: 'inline'
    script: |
      set -euo pipefail
      if terraform version 2>/dev/null | grep -q "Terraform v${TF_VERSION}"; then
        echo "Terraform v${TF_VERSION} is already installed."
        exit 0
      fi
      
      echo "==> [INSTALL] Installing Terraform v${TF_VERSION}..."
      declare -A TF_CHECKSUMS=( ["1.6.6"]="6c3992f231d49932138093f48f0e0a33a01383c5a730b32c6b0a803452b4b353" )
      TF_SHA256="${TF_CHECKSUMS[${TF_VERSION}]}"
      if [ -z "${TF_SHA256}" ]; then echo "FATAL: Checksum for Terraform v${TF_VERSION} is not defined." && exit 1; fi
      
      # Install yq and other binaries into a cached directory
      TOOLS_CACHE_DIR="$(Pipeline.Workspace)/.cache/tools"
      mkdir -p ${TOOLS_CACHE_DIR}
      export PATH=${TOOLS_CACHE_DIR}:$PATH

      wget "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" -O ${TOOLS_CACHE_DIR}/tf.zip
      echo "${TF_SHA256}  ${TOOLS_CACHE_DIR}/tf.zip" | sha256sum -c -
      unzip -o ${TOOLS_CACHE_DIR}/tf.zip -d ${TOOLS_CACHE_DIR} && rm ${TOOLS_CACHE_DIR}/tf.zip
      terraform -v

- task: Bash@3
  displayName: 'Install DevSecOps & Validation Tools'
  condition: eq('${{ parameters.setupType }}', 'full') # Only run for the 'Validate' stage
  inputs:
    targetType: 'inline'
    script: |
      set -euo pipefail
      echo "==> [INSTALL] Installing DevSecOps & Validation tools..."
      
      # Set PATH to include cached tools
      export PATH=$(Pipeline.Workspace)/.cache/tools:$PATH

      # Install Node.js dependencies for schema validation
      npm config set cache $(Pipeline.Workspace)/.cache/npm --global
      npm install -g ajv-cli --cache $(Pipeline.Workspace)/.cache/npm

      # Install AWS CLI (useful for post-validate checks even in Azure pipelines if needed)
      pip config set global.cache-dir $(Pipeline.Workspace)/.cache/pip
      pip install -q awscli 

      # Install Security Scanners
      TFLINT_VERSION="v0.50.3"
      TFSEC_VERSION="v1.28.1"
      echo "--> Installing TFLint..."
      curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s -- "${TFLINT_VERSION}"
      echo "--> Installing TFSec..."
      curl -L "https://github.com/aquasecurity/tfsec/releases/download/${TFSEC_VERSION}/tfsec-linux-amd64" -o $(Pipeline.Workspace)/.cache/tools/tfsec && chmod +x $(Pipeline.Workspace)/.cache/tools/tfsec
      
      echo "--> Installing Checkov and Conftest..."
      pip install checkov=="${CHECKOV_VERSION:-3.2.79}" conftest -q
      
      echo "--> All DevSecOps tools installed."

- task: Bash@3
  displayName: 'Initialize Terraform with Backend'
  condition: and(succeeded(), ne('${{ parameters.setupType }}', 'full')) # Run for Plan and Apply, but not Validate
  inputs:
    targetType: 'inline'
    workingDirectory: '$(Build.SourcesDirectory)/terraform-platform'
    script: |
      set -euo pipefail
      echo "==> [SETUP] Initializing Terraform with backend..."
      # All paths are now available as pipeline variables from the first step.

      # Change to the composition directory for subsequent tasks
      cd "$(COMPOSITION_PATH_ABS)"
      
      terraform init -backend-config="$(BACKEND_CONFIG_PATH_ABS)" -reconfigure -input=false
      echo "--> Terraform backend initialized successfully in $(pwd)"

- task: Bash@3
  displayName: 'Generate TFVars from YAML'
  condition: and(succeeded(), ne('${{ parameters.setupType }}', 'apply_only')) # Skip for Apply stage
  inputs:
    targetType: 'inline'
    workingDirectory: '$(Build.SourcesDirectory)/terraform-platform'
    script: |
      set -euo pipefail
      echo "==> [SETUP] Generating all.tfvars.json from YAML files..."
      # All paths are now available as pipeline variables from the first step.

      # Merge YAML files
      mkdir -p "$(dirname "$(TFVARS_FILE)")"
      python3 "$(TF_TOOLS_DIR)/yaml2tfvars.py" "$(VARS_PATH_ABS)" "$(TFVARS_FILE)"
      echo "--> Successfully created ${TFVARS_FILE}"
