# Azure DevOps Pipeline for Terraform
# This pipeline validates, plans, and applies Terraform configurations for multiple environments.
# It is designed to be secure, efficient, and maintainable by using parameters, templates, and caching.

trigger:
- main # Or your default branch

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: environment
  displayName: 'Target Environment'
  type: string
  default: 'azure-dev'
  values:
  - 'azure-dev'
  - 'azure-stage'
  - 'aws-dev'
  - 'aws-stage'

variables:
  # Dynamically set the path to the configuration file based on the chosen environment parameter.
  # Example: 'app-ovr-infra/azure/dev/pipeline-vars.yml'
  PIPELINE_VARS_PATH: 'app-ovr-infra/azure/dev/pipeline-vars.yml'
  # PIPELINE_VARS_PATH: 'app-ovr-infra/${{ replace(parameters.environment, '-', '/') }}/pipeline-vars.yml'

stages:
# ===================================================================================
# ==                               VALIDATE STAGE                                  ==
# ===================================================================================
- stage: Validate
  displayName: 'Validate & Scan'
  jobs:
  - job: RunValidation
    displayName: 'Terraform Validate & Security Scans'
    steps:
    # This step checks out the primary repository (terraform-platform).
    - checkout: self
      path: 's/terraform-platform'
    # This step checks out the secondary configuration repository (app-ovr-infra).
    # Note: A service connection may be required if this repo is in a different project or provider (e.g., GitHub).
    - checkout: git://app-ovr-infra-project/app-ovr-infra@main
      path: 's/app-ovr-infra'

    - template: azure/pipelines/templates/terraform-setup.yml
      parameters:
        setupType: 'full' # Install all security and validation tools

    - task: Bash@3
      displayName: 'Run Schema Validation, Terraform Validate & Scans'
      workingDirectory: '$(TF_PROJECT_ROOT)' # Working directory is set by the setup template
      inputs:
        targetType: 'inline'
        script: |
          set -euo pipefail
          # Schema Validation Function
          validate_yaml_files() {
            local vars_dir="$1"; local schemas_dir="$2"
            echo "--> Validating YAML files in '${vars_dir}'..."
            if [ ! -d "$vars_dir" ]; then echo "--> WARNING: Variables directory '$vars_dir' not found." && return; fi
            find "$vars_dir" -name "*.yaml" -o -name "*.yml" | while read -r yaml_file; do
                local filename=$(basename "${yaml_file}")
                local schema_name="${filename%.*}.schema.json"
                local schema_file="${schemas_dir}/${schema_name}"
                [ -f "$schema_file" ] && ajv validate -s "$schema_file" -d "$yaml_file" || echo "--> INFO: No schema for '${filename}'."
            done
          }
          validate_yaml_files "$(VARS_PATH_ABS)" "$(SCHEMAS_DIR_PATH_ABS)"

          # Run Terraform and security scans
          cd "$(COMPOSITION_PATH_ABS)"
          terraform init -backend=false
          terraform validate
          terraform plan -var-file="$(TFVARS_FILE)" -out=precheck.tfplan
          terraform show -json precheck.tfplan > precheck.plan.json

          echo "--> Running DevSecOps Scanners..."
          tflint --force
          tfsec .
          checkov --directory . --quiet
          find "$(TF_PROJECT_ROOT)/policies/conftest" -name '*.rego' -print0 | xargs -0 -I {} conftest test precheck.plan.json --policy {} --no-color

# ===================================================================================
# ==                                 PLAN STAGE                                    ==
# ===================================================================================
- stage: Plan
  displayName: 'Plan'
  dependsOn: Validate
  jobs:
  - job: RunPlan
    displayName: 'Terraform Plan'
    steps:
    - checkout: self
      path: 's/terraform-platform'
    - checkout: git://app-ovr-infra-project/app-ovr-infra@main
      path: 's/app-ovr-infra'

    - template: azure/pipelines/templates/terraform-setup.yml
      parameters:
        setupType: 'minimal' # Only install core tools needed for plan

    - task: Bash@3
      displayName: 'Generate Terraform Plan'
      workingDirectory: '$(COMPOSITION_PATH_ABS)' # Working directory is set by the setup template
      inputs:
        targetType: 'inline'
        script: |
          set -euo pipefail
          echo "==> [PLAN] Generating Terraform plan in $(pwd)..."
          terraform plan -var-file="$(TFVARS_FILE)" -out=tfplan

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Terraform Plan'
      inputs:
        targetPath: '$(COMPOSITION_PATH_ABS)/tfplan'
        artifact: 'tfplan-$(environment)' # Make artifact name unique per environment
        publishLocation: 'pipeline'

# ===================================================================================
# ==                                 APPLY STAGE                                   ==
# ===================================================================================
- stage: Apply
  displayName: 'Apply'
  dependsOn: Plan
  jobs:
  - deployment: RunApply
    displayName: 'Terraform Apply'
    environment: 'terraform-${{ parameters.environment }}' # e.g., terraform-azure-dev
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            path: 's/terraform-platform'
          - checkout: git://app-ovr-infra-project/app-ovr-infra@main
            path: 's/app-ovr-infra'

          - template: azure/pipelines/templates/terraform-setup.yml
            parameters:
              setupType: 'apply_only' # Skip tfvars generation

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Terraform Plan'
            inputs:
              buildType: 'current'
              artifactName: 'tfplan-$(environment)'
              targetPath: '$(COMPOSITION_PATH_ABS)'

          - task: Bash@3
            displayName: 'Apply Terraform Plan'
            workingDirectory: '$(COMPOSITION_PATH_ABS)' # Working directory is set by the setup template
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                echo "==> [APPLY] Applying Terraform plan in $(pwd)..."
                terraform apply -input=false "tfplan"